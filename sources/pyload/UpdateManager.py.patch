--- a/module/plugins/hooks/UpdateManager.py
+++ b/module/plugins/hooks/UpdateManager.py
@@ -8,35 +8,35 @@ import re
 import sys
 import time
 
-from module.plugins.internal.Addon import Expose, Addon, threaded
-from module.plugins.internal.utils import encode, exists, fs_join
+from ..internal.Addon import Addon
+from ..internal.misc import Expose, encode, exists, fsjoin, threaded
 
 
 class UpdateManager(Addon):
-    __name__    = "UpdateManager"
-    __type__    = "hook"
-    __version__ = "1.03"
-    __status__  = "testing"
+    __name__ = "UpdateManager"
+    __type__ = "hook"
+    __version__ = "1.20"
+    __status__ = "testing"
 
-    __config__ = [("activated"    , "bool", "Activated"                                , True ),
-                  ("checkinterval", "int" , "Check interval in hours"                  , 8    ),
-                  ("autorestart"  , "bool", "Auto-restart pyLoad when required"        , True ),
-                  ("checkonstart" , "bool", "Check for updates on startup"             , True ),
-                  ("checkperiod"  , "bool", "Check for updates periodically"           , True ),
-                  ("reloadplugins", "bool", "Monitor plugin code changes in debug mode", True ),
-                  ("nodebugupdate", "bool", "Don't update plugins in debug mode"       , False)]
+    __config__ = [("activated", "bool", "Activated", True),
+                  ("checkinterval", "int", "Check interval in hours", 6),
+                  ("autorestart", "bool", "Auto-restart pyLoad when required", True),
+                  ("checkonstart", "bool", "Check for updates on startup", True),
+                  ("checkperiod", "bool", "Check for updates periodically", True),
+                  ("reloadplugins", "bool", "Monitor plugin code changes in debug mode", True),
+                  ("nodebugupdate", "bool", "Don't update plugins in debug mode", False)]
 
     __description__ = """Check for updates"""
-    __license__     = "GPLv3"
-    __authors__     = [("Walter Purcaro", "vuolter@gmail.com")]
-
+    __license__ = "GPLv3"
+    __authors__ = [("Walter Purcaro", "vuolter@gmail.com")]
 
     _VERSION = re.compile(r'^\s*__version__\s*=\s*("|\')([\d.]+)\1', re.M)
 
-    SERVER_URL     = "http://updatemanager.pyload.org"
+    # SERVER_URL     = "http://updatemanager.pyload.org"
+    # SERVER_URL = "http://updatemanager-spyload.rhcloud.com"
+    SERVER_URL = "https://github.com/pyload/updates/raw/master/plugins.txt"
     CHECK_INTERVAL = 3 * 60 * 60  #: 3 hours
 
-
     def activate(self):
         if self.checkonstart:
             self.pyload.api.pauseServer()
@@ -45,15 +45,17 @@ class UpdateManager(Addon):
             if self.do_restart is False:
                 self.pyload.api.unpauseServer()
 
-        self.start_periodical(10)
-
+        self.periodical.start(10)
 
     def init(self):
-        self.info      = {'pyload': False, 'plugins': False, 'last_check': time.time()}
-        self.mtimes    = {}  #: Store modification time for each plugin
+        self.info.update({
+            'pyload': False,
+            'plugins': False,
+            'last_check': time.time()})
+        self.mtimes = {}  #: Store modification time for each plugin
         self.event_map = {'allDownloadsProcessed': "all_downloads_processed"}
 
-        if self.get_config('checkonstart'):
+        if self.config.get('checkonstart'):
             self.pyload.api.pauseServer()
             self.checkonstart = True
         else:
@@ -61,24 +63,25 @@ class UpdateManager(Addon):
 
         self.do_restart = False
 
-
     def all_downloads_processed(self):
         if self.do_restart is True:
             self.pyload.api.restart()
 
-
-    def periodical(self):
+    def periodical_task(self):
         if self.pyload.debug:
-            if self.get_config('reloadplugins'):
+            if self.config.get('reloadplugins'):
                 self.autoreload_plugins()
 
-            if self.get_config('nodebugupdate'):
+            if self.config.get('nodebugupdate'):
                 return
 
-        if self.get_config('checkperiod') and \
-           time.time() - max(self.CHECK_INTERVAL, self.get_config('checkinterval') * 60 * 60) > self.info['last_check']:
+        if self.config.get('checkperiod') and \
+           time.time() - max(self.CHECK_INTERVAL, self.config.get('checkinterval') * 60 * 60) > self.info['last_check']:
             self.update()
 
+        if self.do_restart is True:
+            if self.pyload.threadManager.pause and not self.pyload.api.statusDownloads():
+                self.pyload.api.restart()
 
     #: Deprecated method, use `autoreload_plugins` instead
     @Expose
@@ -88,7 +91,6 @@ class UpdateManager(Addon):
         """
         return self.autoreload_plugins(*args, **kwargs)
 
-
     @Expose
     def autoreload_plugins(self):
         """
@@ -98,28 +100,27 @@ class UpdateManager(Addon):
         modules = filter(
             lambda m: m and (m.__name__.startswith("module.plugins.") or
                              m.__name__.startswith("userplugins.")) and
-                             m.__name__.count(".") >= 2, sys.modules.values()
+            m.__name__.count(".") >= 2, sys.modules.values()
         )
         for m in modules:
-            root, type, name = m.__name__.rsplit(".", 2)
-            id = (type, name)
-            if type in self.pyload.pluginManager.plugins:
+            root, plugin_type, plugin_name = m.__name__.rsplit(".", 2)
+            plugin_id = (plugin_type, plugin_name)
+            if plugin_type in self.pyload.pluginManager.plugins:
                 f = m.__file__.replace(".pyc", ".py")
                 if not os.path.isfile(f):
                     continue
 
                 mtime = os.path.getmtime(f)
 
-                if id not in self.mtimes:
-                    self.mtimes[id] = mtime
+                if plugin_id not in self.mtimes:
+                    self.mtimes[plugin_id] = mtime
 
-                elif self.mtimes[id] < mtime:
-                    reloads.append(id)
-                    self.mtimes[id] = mtime
+                elif self.mtimes[plugin_id] < mtime:
+                    reloads.append(plugin_id)
+                    self.mtimes[plugin_id] = mtime
 
         return True if self.pyload.pluginManager.reloadPlugins(reloads) else False
 
-
     def server_response(self, line=None):
         try:
             html = self.load(self.SERVER_URL,
@@ -139,43 +140,45 @@ class UpdateManager(Addon):
 
             return res
 
-
     @Expose
     @threaded
     def update(self):
         """
         Check for updates
         """
-        if self._update() is not 2 or not self.get_config('autorestart'):
+        if self._update() != 2 or not self.config.get('autorestart'):
             return
 
         if not self.pyload.api.statusDownloads():
             self.pyload.api.restart()
         else:
-            self.do_restart = True
-            self.log_warning(_("pyLoad restart scheduled"), _("Downloads are active, pyLoad restart postponed once the download is done"))
+            self.log_warning(_("pyLoad restart scheduled"),
+                             _("Downloads are active, pyLoad restart postponed once the download is done"))
             self.pyload.api.pauseServer()
-
+            self.do_restart = True
 
     def _update(self):
         newversion = self.server_response(0)
 
-        self.info['pyload']     = False
+        self.info['pyload'] = False
         self.info['last_check'] = time.time()
 
         if not newversion:
             exitcode = 0
 
-        elif newversion == "None":
+        elif newversion == self.pyload.api.getServerVersion():
             self.log_info(_("pyLoad is up to date!"))
             exitcode = self.update_plugins()
 
-        else:
+        elif re.search(r'^\d+(?:\.\d+){0,3}[a-z]?$', newversion):
             self.log_info(_("***  New pyLoad %s available  ***") % newversion)
             self.log_info(_("***  Get it here: https://github.com/pyload/pyload/releases  ***"))
             self.info['pyload'] = True
             exitcode = 3
 
+        else:
+            exitcode = 0
+
         #: Exit codes:
         #:  -1 = No plugin updated, new pyLoad version available
         #:   0 = No plugin updated
@@ -183,15 +186,14 @@ class UpdateManager(Addon):
         #:   2 = Plugins updated, but restart required
         return exitcode
 
-
     @Expose
     def update_plugins(self):
-        updates = self.server_response()
+        server_data = self.server_response()
 
-        if not updates or updates[0] != "None":
+        if not server_data or server_data[0] != self.pyload.api.getServerVersion():
             return 0
 
-        updated = self._update_plugins(updates)
+        updated = self._update_plugins(server_data)
 
         if updated:
             self.log_info(_("*** Plugins updated ***"))
@@ -203,7 +205,11 @@ class UpdateManager(Addon):
                 self.info['plugins'] = True
                 exitcode = 2
 
+            paused = self.pyload.threadManager.pause
+            self.pyload.api.pauseServer()
             self.manager.dispatchEvent("plugin_updated", updated)
+            if not paused:
+                self.pyload.api.unpauseServer()
         else:
             self.log_info(_("All plugins are up to date!"))
             exitcode = 0
@@ -214,16 +220,15 @@ class UpdateManager(Addon):
         #:   2 = Plugins updated, but restart required
         return exitcode
 
+    def parse_updates(self, server_data):
+        schema = server_data[2].split('|')
 
-    def parse_list(self, list):
-        schema = list[2].split('|')
-
-        if "BLACKLIST" in list:
-            blacklist  = list[list.index('BLACKLIST') + 1:]
-            updatelist = list[3:list.index('BLACKLIST')]
+        if "BLACKLIST" in server_data:
+            blacklist = server_data[server_data.index('BLACKLIST') + 1:]
+            updatelist = server_data[3:server_data.index('BLACKLIST')]
         else:
-            blacklist  = []
-            updatelist = list[3:]
+            blacklist = []
+            updatelist = server_data[3:]
 
         for l in updatelist, blacklist:
             nl = []
@@ -233,57 +238,70 @@ class UpdateManager(Addon):
                 nl.append(d)
             l[:] = nl
 
-        updatelist = sorted(updatelist, key=operator.itemgetter("type", "name"))
-        blacklist  = sorted(blacklist, key=operator.itemgetter("type", "name"))
+        updatelist = sorted(updatelist,
+                            key=operator.itemgetter("type", "name"))
+        blacklist = sorted(blacklist, key=operator.itemgetter("type", "name"))
 
         return updatelist, blacklist
 
-
-    def _update_plugins(self, updates):
+    def _update_plugins(self, server_data):
         """
         Check for plugin updates
         """
         updated = []
 
-        updatelist, blacklist = self.parse_list(updates)
+        updatelist, blacklist = self.parse_updates(server_data)
 
-        url = updates[1]
+        url = server_data[1]
         req = self.pyload.requestFactory.getRequest(self.classname)
 
         if blacklist:
             #@NOTE: Protect UpdateManager from self-removing
-            type_plugins = [(plugin['type'], plugin['name']) for plugin in blacklist \
-                            if plugin['name'] is not self.classname and plugin['type'] is not self.__type__]
+            if os.name == "nt":
+                #@NOTE: Windows filesystem is case insensitive, make sure we do not delete legitimate plugins
+                whitelisted_plugins = [
+                    (plugin['type'], plugin['name'].upper()) for plugin in updatelist]
+                blacklisted_plugins = [(plugin['type'], plugin['name']) for plugin in blacklist
+                                       if not (plugin['name'] == self.classname and plugin['type'] == self.__type__)
+                                       and (plugin['type'], plugin['name'].upper()) not in whitelisted_plugins]
+            else:
+                blacklisted_plugins = [(plugin['type'], plugin['name']) for plugin in blacklist
+                                       if not (plugin['name'] == self.classname and plugin['type'] == self.__type__)]
 
             c = 1
-            l = len(type_plugins)
+            l = len(blacklisted_plugins)
             for idx, plugin in enumerate(updatelist):
                 if c > l:
                     break
-                name = plugin['name']
-                type = plugin['type']
-                for t, n in type_plugins:
-                    if n != name or t != type:
+                plugin_name = plugin['name']
+                plugin_type = plugin['type']
+                for t, n in blacklisted_plugins:
+                    if n != plugin_name or t != plugin_type:
                         continue
                     updatelist.pop(idx)
                     c += 1
                     break
 
-            for t, n in self.remove_plugins(type_plugins):
-                self.log_info(_("Removed blacklisted plugin: %(type)s %(name)s") % {
-                    'type': t.upper(),
-                    'name': n,
-                })
+            for t, n in self.remove_plugins(blacklisted_plugins):
+                self.log_info(_("Removed blacklisted plugin: %(type)s %(name)s") %
+                              {'type': t.upper(),
+                               'name': n,})
 
         for plugin in updatelist:
-            name    = plugin['name']
-            type    = plugin['type']
-            version = plugin['version']
+            plugin_name = plugin['name']
+            plugin_type = plugin['type']
+            plugin_version = plugin['version']
 
-            plugins = getattr(self.pyload.pluginManager, "%sPlugins" % type.rstrip('s'))  #@TODO: Remove rstrip in 0.4.10
+            plugins = getattr(self.pyload.pluginManager,
+                              "%sPlugins" % plugin_type.rstrip('s'))  # @TODO: Remove rstrip in 0.4.10
 
-            oldver = float(plugins[name]['v']) if name in plugins else None
-            newver = float(version)
+            oldver = float(plugins[plugin_name]['v']) if plugin_name in plugins else None
+            try:
+                newver = float(plugin_version)
+            except ValueError:
+                self.log_error(_("Error updating plugin: %s %s") % (plugin_type.rstrip('s').upper(), plugin_name),
+                               _("Bad version number on the server"))
+                continue
 
             if not oldver:
                 msg = "New plugin: %(type)s %(name)s (v%(newver).2f)"
@@ -292,8 +310,8 @@ class UpdateManager(Addon):
             else:
                 continue
 
-            self.log_info(_(msg) % {'type'  : type.rstrip('s').upper(),  #@TODO: Remove rstrip in 0.4.10
-                                    'name'  : name,
+            self.log_info(_(msg) % {'type': plugin_type.rstrip('s').upper(),  # @TODO: Remove rstrip in 0.4.10
+                                    'name': plugin_name,
                                     'oldver': oldver,
                                     'newver': newver})
             try:
@@ -303,20 +321,21 @@ class UpdateManager(Addon):
                     raise Exception(_("URL not found"))
 
                 m = self._VERSION.search(content)
-                if m and m.group(2) == version:
-                    with open(fs_join("userplugins", type, name + ".py"), "wb") as f:
+                if m and m.group(2) == plugin_version:
+                    with open(fsjoin("userplugins", plugin_type, plugin_name + ".py"), "wb") as f:
                         f.write(encode(content))
 
-                    updated.append((type, name))
+                    updated.append((plugin_type, plugin_name))
                 else:
                     raise Exception(_("Version mismatch"))
 
             except Exception, e:
-                self.log_error(_("Error updating plugin: %s %s") % (type.rstrip('s').upper(), name), e)    #@TODO: Remove rstrip in 0.4.10
+                self.log_error(_("Error updating plugin: %s %s") %
+                               (plugin_type.rstrip('s').upper(), plugin_name),
+                               e)  # @TODO: Remove rstrip in 0.4.10
 
         return updated
 
-
     #: Deprecated method, use `remove_plugins` instead
     @Expose
     def removePlugins(self, *args, **kwargs):
@@ -325,29 +344,28 @@ class UpdateManager(Addon):
         """
         return self.remove_plugins(*args, **kwargs)
 
-
     @Expose
-    def remove_plugins(self, type_plugins):
+    def remove_plugins(self, plugin_ids):
         """
         Delete plugins from disk
         """
-        if not type_plugins:
+        if not plugin_ids:
             return
 
         removed = set()
 
-        self.log_debug("Requested deletion of plugins: %s" % type_plugins)
+        self.log_debug("Requested deletion of plugins: %s" % plugin_ids)
 
-        for type, name in type_plugins:
+        for plugin_type, plugin_name in plugin_ids:
             rootplugins = os.path.join(pypath, "module", "plugins")
 
-            for dir in ("userplugins", rootplugins):
-                py_filename  = fs_join(dir, type, name + ".py")
+            for basedir in ("userplugins", rootplugins):
+                py_filename = fsjoin(basedir, plugin_type, plugin_name + ".py")
                 pyc_filename = py_filename + "c"
 
-                if type is "hook":
+                if plugin_type == "hook":
                     try:
-                        self.manager.deactivateHook(name)
+                        self.manager.deactivateHook(plugin_name)
 
                     except Exception, e:
                         self.log_debug(e, trace=True)
@@ -363,7 +381,8 @@ class UpdateManager(Addon):
                         self.log_warning(_("Error removing `%s`") % filename, e)
 
                     else:
-                        id = (type, name)
-                        removed.add(id)
+                        plugin_id = (plugin_type, plugin_name)
+                        removed.add(plugin_id)
 
-        return list(removed)  #: Return a list of the plugins successfully removed
+        #: Return a list of the plugins successfully removed
+        return list(removed)
