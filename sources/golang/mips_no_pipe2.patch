--- a/src/syscall/syscall_linux_mipsx.go
+++ b/src/syscall/syscall_linux_mipsx.go
@@ -106,16 +106,30 @@ func setTimeval(sec, usec int64) Timeval {
 	return Timeval{Sec: int32(sec), Usec: int32(usec)}
 }
 
-//sysnb pipe2(p *[2]_C_int, flags int) (err error)
+//sysnb pipe() (r int, w int, err error)
 
 func Pipe2(p []int, flags int) (err error) {
 	if len(p) != 2 {
 		return EINVAL
 	}
-	var pp [2]_C_int
-	err = pipe2(&pp, flags)
-	p[0] = int(pp[0])
-	p[1] = int(pp[1])
+	var flags2 int
+	p[0], p[1], err = pipe()
+	if err != nil {
+		return
+	}
+	flags2, err = fcntl(p[0], F_GETFL, 0)
+	if err != nil {
+		return
+	}
+	_, err = fcntl(p[0], F_SETFL, flags2 | flags)
+	if err != nil {
+		return
+	}
+	flags2, err = fcntl(p[1], F_GETFL, 0)
+	if err != nil {
+		return
+	}
+	_, err = fcntl(p[1], F_SETFL, flags2 | flags)
 	return
 }
 
@@ -123,10 +137,7 @@ func Pipe(p []int) (err error) {
 	if len(p) != 2 {
 		return EINVAL
 	}
-	var pp [2]_C_int
-	err = pipe2(&pp, 0)
-	p[0] = int(pp[0])
-	p[1] = int(pp[1])
+	p[0], p[1], err = pipe()
 	return
 }
 
--- a/src/syscall/zsyscall_linux_mips.go
+++ b/src/syscall/zsyscall_linux_mips.go
@@ -1675,12 +1675,14 @@ func Stat(path string, stat *Stat_t) (err error) {
 
 // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
 
-func pipe2(p *[2]_C_int, flags int) (err error) {
-	_, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)), uintptr(flags), 0)
-	if e1 != 0 {
-		err = errnoErr(e1)
-	}
-	return
+func pipe() (r int, w int, err error) {
+        r0, r1, e1 := RawSyscall(SYS_PIPE, 0, 0, 0)
+        r = int(r0)
+        w = int(r1)
+        if e1 != 0 {
+                err = errnoErr(e1)
+        }
+        return
 }
 
 // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
--- a/src/syscall/zsyscall_linux_mipsle.go
+++ b/src/syscall/zsyscall_linux_mipsle.go
@@ -1675,12 +1675,14 @@ func Stat(path string, stat *Stat_t) (err error) {
 
 // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
 
-func pipe2(p *[2]_C_int, flags int) (err error) {
-	_, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)), uintptr(flags), 0)
-	if e1 != 0 {
-		err = errnoErr(e1)
-	}
-	return
+func pipe() (r int, w int, err error) {
+        r0, r1, e1 := RawSyscall(SYS_PIPE, 0, 0, 0)
+        r = int(r0)
+        w = int(r1)
+        if e1 != 0 {
+                err = errnoErr(e1)
+        }
+        return
 }
 
 // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
